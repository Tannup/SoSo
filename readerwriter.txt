import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

class ReaderWriter {
    private int readers = 0;
    private boolean writing = false;
    private int sharedData = 0;
    private final ReentrantLock lock = new ReentrantLock();
    private final Condition condition = lock.newCondition();

    public void read(int readerId) throws InterruptedException {
        lock.lock();
        try {
            while (writing) condition.await();
            readers++;
        } finally {
            lock.unlock();
        }

        System.out.println("Reader " + readerId + ": Read shared data: " + sharedData);
        Thread.sleep(500);

        lock.lock();
        try {
            if (--readers == 0) condition.signalAll();
        } finally {
            lock.unlock();
        }
    }

    public void write(int writerId) throws InterruptedException {
        lock.lock();
        try {
            while (readers > 0 || writing) condition.await();
            writing = true;
            sharedData++;
            System.out.println("Writer " + writerId + ": Wrote new value: " + sharedData);
            Thread.sleep(500);
            writing = false;
            condition.signalAll();
        } finally {
            lock.unlock();
        }
    }
}

class Reader implements Runnable {
    private final ReaderWriter rw;
    private final int id;

    public Reader(ReaderWriter rw, int id) { this.rw = rw; this.id = id; }
    public void run() { try { rw.read(id); } catch (InterruptedException ignored) {} }
}

class Writer implements Runnable {
    private final ReaderWriter rw;
    private final int id;

    public Writer(ReaderWriter rw, int id) { this.rw = rw; this.id = id; }
    public void run() { try { rw.write(id); } catch (InterruptedException ignored) {} }
}

public class ReaderWriterApp {
    public static void main(String[] args) {
        ReaderWriter rw = new ReaderWriter();
        for (int i = 1; i <= 3; i++) new Thread(new Writer(rw, i)).start();
        for (int i = 1; i <= 5; i++) new Thread(new Reader(rw, i)).start();
    }
}