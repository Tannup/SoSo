import java.util.concurrent.Semaphore;
import java.util.LinkedList;
import java.util.Queue;

class ProducerConsumer {
    private static final int BUFFER_SIZE = 5;
    private static final int MAX_ITEMS = 10;
    private Queue<Integer> buffer = new LinkedList<>();
    private Semaphore empty = new Semaphore(BUFFER_SIZE);
    private Semaphore full = new Semaphore(0);
    private int producedItems = 0, consumedItems = 0;

    class Producer extends Thread {
        public void run() {
            try {
                while (producedItems < MAX_ITEMS) {
                    int item = (int) (Math.random() * 100);
                    empty.acquire();
                    synchronized (buffer) {
                        if (producedItems >= MAX_ITEMS) break;
                        buffer.add(item);
                        producedItems++;
                        System.out.println("Produced: " + item);
                    }
                    full.release();
                    Thread.sleep((int) (Math.random() * 1000));
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    class Consumer extends Thread {
        public void run() {
            try {
                while (consumedItems < MAX_ITEMS) {
                    full.acquire();
                    synchronized (buffer) {
                        if (consumedItems >= MAX_ITEMS) break;
                        int item = buffer.remove();
                        consumedItems++;
                        System.out.println("Consumed: " + item);
                    }
                    empty.release();
                    Thread.sleep((int) (Math.random() * 1500));
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        ProducerConsumer pc = new ProducerConsumer();
        Thread producer = pc.new Producer();
        Thread consumer = pc.new Consumer();
        producer.start();
        consumer.start();
        try {
            producer.join();
            consumer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
